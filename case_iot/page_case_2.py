"""
Caso 2: An√°lisis de Datos IoT con IA Generativa
Demuestra la aplicaci√≥n de IA generativa para monitoreo y an√°lisis de dispositivos IoT.
"""
import streamlit as st
import logging
import os
import base64
from datetime import datetime
from typing import Dict, List, Any
from case_iot.utils.pinecone_utils import query_by_id, interpret_and_search
from case_iot.utils.embedding_utils import generate_chat_response
from case_iot.utils.pdf_utils import generar_pdf
from config import Config

# Configurar logging
logger = logging.getLogger(__name__)

def render_iot_monitor_app():
    """
    Funci√≥n principal que renderiza la aplicaci√≥n IoT Monitor.
    """
    # T√≠tulo principal
    st.title("Caso 2 - Inteligencia Artificial Generativa para IoT")
    
    # Verificar configuraciones API
    if not Config.OPENAI_API_KEY or not Config.PINECONE_API_KEY:
        st.error("‚ö†Ô∏è Faltan configuraciones de API. Por favor configure las variables de entorno.")
        return
    
    # CSS personalizado para mejorar la interfaz
    st.markdown("""
    <style>
    .highlight {
        background-color: #f0f7fa;
        padding: 15px;
        border-radius: 8px;
        border-left: 5px solid #2C5BA9;
        margin-bottom: 1rem;
    }
    .titulo-seccion {
        color: #2B547E;
        margin-top: 1em;
        margin-bottom: 0.5em;
        font-weight: 600;
    }
    .alert-success {
        background-color: #e6f3e6;
        padding: 10px;
        border-radius: 5px;
        border-left: 5px solid #4CAF50;
    }
    .alert-warning {
        background-color: #fff8e6;
        padding: 10px;
        border-radius: 5px;
        border-left: 5px solid #ff9800;
    }
    .alert-danger {
        background-color: #fde8e8;
        padding: 10px;
        border-radius: 5px;
        border-left: 5px solid #f44336;
    }
    .device-card {
        background-color: white;
        padding: 15px;
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        margin-bottom: 10px;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Inicializar variables de estado de sesi√≥n
    if "last_report_id" not in st.session_state:
        st.session_state["last_report_id"] = ""
        
    if "messages" not in st.session_state:
        st.session_state["messages"] = []
        
    if "settings" not in st.session_state:
        st.session_state["settings"] = {
            "model": "gpt-3.5-turbo",
            "map_type": "street",
            "language": "es"
        }
    
    # Crear pesta√±as para diferentes funcionalidades
    tab1, tab2, tab3, tab4 = st.tabs([
        "üè† IoT Monitor", 
        "üìä Reportes PDF", 
        "üìù Ejemplos", 
        "üí¨ IoT ChatBot"
    ])
    
    # Pesta√±a 1: Visi√≥n general del IoT Monitor
    with tab1:
        render_overview_tab()
    
    # Pesta√±a 2: Generaci√≥n de reportes PDF
    with tab2:
        render_reports_tab()
    
    # Pesta√±a 3: Ejemplos de consultas
    with tab3:
        render_examples_tab()
    
    # Pesta√±a 4: ChatBot IoT
    with tab4:
        render_chatbot_tab()

def render_overview_tab():
    """
    Renderiza la pesta√±a de visi√≥n general del IoT Monitor.
    """
    st.title("IoT Monitor: La Soluci√≥n Integral para Dispositivos IoT")
    
    # Descripci√≥n principal con formato mejorado
    st.markdown("""
    <div class="highlight">
    <h2 class="titulo-seccion">¬øQu√© es IoT Monitor?</h2>
    <p>
        IoT Monitor es la plataforma definitiva para supervisar, gestionar y optimizar 
        tus dispositivos IoT, aprovechando tecnolog√≠as avanzadas como <strong>Pinecone</strong> para
        almacenamiento vectorial y <strong>OpenAI</strong> para procesamiento de lenguaje natural.
    </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Caracter√≠sticas y beneficios
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <h3 class="titulo-seccion">Monitoreo en Tiempo Real</h3>
        <ul>
            <li>Seguimiento continuo de se√±al y bater√≠a</li>
            <li>Geolocalizaci√≥n precisa de dispositivos</li>
            <li>Detecci√≥n de manipulaciones y violaciones</li>
            <li>Alertas automatizadas y personalizables</li>
        </ul>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <h3 class="titulo-seccion">Gesti√≥n Inteligente de Datos</h3>
        <ul>
            <li>B√∫squedas sem√°nticas con embeddings vectoriales</li>
            <li>Filtrado avanzado mediante IA</li>
            <li>Procesamiento de consultas en lenguaje natural</li>
            <li>Re-ranking para resultados m√°s precisos</li>
        </ul>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <h3 class="titulo-seccion">Informes y An√°lisis</h3>
        <ul>
            <li>Generaci√≥n automatizada de reportes PDF</li>
            <li>Visualizaciones geoespaciales</li>
            <li>Estad√≠sticas de rendimiento</li>
            <li>Identificaci√≥n proactiva de problemas</li>
        </ul>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <h3 class="titulo-seccion">Experiencia de Usuario Optimizada</h3>
        <ul>
            <li>Interfaz conversacional con ChatBot especializado</li>
            <li>Consultas en lenguaje natural</li>
            <li>Respuestas contextualizadas y precisas</li>
            <li>Interfaz intuitiva y accesible</li>
        </ul>
        """, unsafe_allow_html=True)
    
    # Diagrama de arquitectura o imagen representativa
    st.subheader("Arquitectura del Sistema")
    
    st.markdown("""
    ```
    +-------------------+     +-------------------+     +-------------------+
    |                   |     |                   |     |                   |
    |  Dispositivos IoT | --> | API/Gateway       | --> |  Procesamiento   |
    |  (Sensores)       |     | (Recepci√≥n datos) |     |  (Pinecone/OpenAI)|
    |                   |     |                   |     |                   |
    +-------------------+     +-------------------+     +-------------------+
                                                                |
                                                                v
    +-------------------+     +-------------------+     +-------------------+
    |                   |     |                   |     |                   |
    |  Interfaz Usuario | <-- | Generaci√≥n        | <-- |  An√°lisis         |
    |  (Streamlit)      |     | (Reportes/Mapas)  |     |  (Embeddings/RAG) |
    |                   |     |                   |     |                   |
    +-------------------+     +-------------------+     +-------------------+
    ```
    """)
    
    # Casos de uso
    st.subheader("Principales Casos de Uso")
    
    cases = [
        {
            "title": "Monitoreo de Dispositivos de Rastreo",
            "description": "Seguimiento de dispositivos GPS para log√≠stica, flotas o seguridad, permitiendo localizar activos y detectar violaciones de per√≠metro."
        },
        {
            "title": "Gesti√≥n de Alertas",
            "description": "Identificaci√≥n temprana de dispositivos con bater√≠a baja, se√±al d√©bil o posibles manipulaciones para intervenci√≥n preventiva."
        },
        {
            "title": "An√°lisis de Patrones",
            "description": "Detecci√≥n de comportamientos inusuales y patrones que pueden indicar problemas o √°reas de mejora."
        },
        {
            "title": "Reportes Automatizados",
            "description": "Generaci√≥n de informes detallados sobre estado y rendimiento de dispositivos para equipos internos o clientes."
        }
    ]
    
    # Mostrar casos de uso en formato de tarjetas
    cols = st.columns(2)
    for i, case in enumerate(cases):
        with cols[i % 2]:
            st.markdown(f"""
            <div class="device-card">
                <h4>{case['title']}</h4>
                <p>{case['description']}</p>
            </div>
            """, unsafe_allow_html=True)

def render_reports_tab():
    """
    Renderiza la pesta√±a de generaci√≥n de reportes PDF.
    """
    logger.info("Entrando a la p√°gina Reportes")
    st.title("Generar Reportes PDF")
    
    # Opciones de consulta
    col1, col2 = st.columns(2)
    
    with col1:
        tipo_consulta = st.radio("Tipo de consulta:", ("device_id", "user_id"))
    
    with col2:
        input_id = st.text_input(
            f"Ingrese {tipo_consulta}:", 
            value=st.session_state["last_report_id"],
            placeholder=f"Ej: 6cfc7a7a para device_id"
        )
    
    # Bot√≥n de generaci√≥n
    generate_col, status_col = st.columns([1, 2])
    with generate_col:
        generar_button = st.button(
            "üìä Generar Reporte", 
            type="primary", 
            use_container_width=True,
            disabled=not input_id.strip()
        )
    
    # Procesar generaci√≥n de reporte
    if generar_button:
        if not input_id.strip():
            st.warning("Por favor, ingresa un valor de ID v√°lido.")
        else:
            # Guardar ID para futuros usos
            st.session_state["last_report_id"] = input_id
            
            try:
                # Consultar datos
                with st.spinner(f"Consultando datos para {tipo_consulta} = {input_id}..."):
                    data = query_by_id(input_id, tipo_consulta)
                
                if data:
                    st.success(f"‚úÖ Se encontraron {len(data)} registros para {tipo_consulta} = {input_id}")
                    
                    # Mostrar datos en formato de tarjetas
                    with st.expander("Ver detalles de registros", expanded=True):
                        for idx, item in enumerate(data, start=1):
                            st.markdown(f"""
                            <div class="device-card">
                                <h4>Registro #{idx}</h4>
                                <pre>{format_device_data(item)}</pre>
                            </div>
                            """, unsafe_allow_html=True)
                    
                    # Generar PDF
                    with st.spinner("Generando reporte PDF..."):
                        pdf_bytes = generar_pdf(
                            data,
                            titulo=f"Reporte IoT: {tipo_consulta}={input_id}"
                        )
                        
                        if pdf_bytes:
                            # Asegurar que exista el directorio
                            os.makedirs("results", exist_ok=True)
                            
                            # Guardar PDF localmente
                            pdf_filename = f"Reporte_{tipo_consulta}_{input_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
                            pdf_path = os.path.join("results", pdf_filename)
                            
                            with open(pdf_path, "wb") as f:
                                f.write(pdf_bytes)
                            
                            # Bot√≥n de descarga
                            st.download_button(
                                label="‚¨áÔ∏è Descargar Reporte en PDF",
                                data=pdf_bytes,
                                file_name=pdf_filename,
                                mime="application/pdf"
                            )
                            
                            # Vista previa
                            st.subheader("Vista previa del PDF")
                            st.markdown(f"""
                                <embed src="data:application/pdf;base64,{base64.b64encode(pdf_bytes).decode()}"
                                    width="100%" height="500" type="application/pdf">
                                """, unsafe_allow_html=True)
                            
                        else:
                            st.error("‚ùå No se pudo generar el PDF.")
                else:
                    st.warning(f"‚ö†Ô∏è No se encontraron registros para {tipo_consulta} = {input_id}")
                    
            except Exception as e:
                logger.error(f"Error consultando Pinecone: {e}", exc_info=True)
                st.error(f"‚ùå Error consultando datos: {str(e)}")

def format_device_data(item: Dict[str, Any]) -> str:
    """
    Formatea datos de dispositivo para visualizaci√≥n.
    
    Args:
        item (Dict[str, Any]): Datos del dispositivo
        
    Returns:
        str: Texto formateado
    """
    # Agrupar campos por categor√≠a
    id_fields = ["device_id", "user_id"]
    location_fields = ["latitude", "longitude"]
    status_fields = ["battery_level", "signal_strength", "tamper_detected", "status", "restriction_violation"]
    time_fields = ["timestamp"]
    
    # Construir texto formateado
    lines = []
    
    # Secci√≥n de identificaci√≥n
    id_section = []
    for field in id_fields:
        if field in item:
            id_section.append(f"{field}: {item[field]}")
    if id_section:
        lines.append("üì± Identificaci√≥n:")
        lines.extend([f"  {line}" for line in id_section])
    
    # Secci√≥n de ubicaci√≥n
    location_section = []
    for field in location_fields:
        if field in item:
            location_section.append(f"{field}: {item[field]}")
    if location_section:
        lines.append("\nüìç Ubicaci√≥n:")
        lines.extend([f"  {line}" for line in location_section])
    
    # Secci√≥n de estado
    status_section = []
    for field in status_fields:
        if field in item:
            # Formateo especial seg√∫n campo
            if field == "battery_level":
                value = item[field]
                status_section.append(f"{field}: {value}% {'üîã' if float(value) > 50 else 'ü™´'}")
            elif field == "tamper_detected" and str(item[field]).lower() in ["true", "1"]:
                status_section.append(f"{field}: {item[field]} ‚ö†Ô∏è")
            elif field == "restriction_violation" and str(item[field]).lower() in ["true", "1"]:
                status_section.append(f"{field}: {item[field]} üö®")
            else:
                status_section.append(f"{field}: {item[field]}")
    if status_section:
        lines.append("\nüîÑ Estado:")
        lines.extend([f"  {line}" for line in status_section])
    
    # Secci√≥n de tiempo
    time_section = []
    for field in time_fields:
        if field in item:
            time_section.append(f"{field}: {item[field]}")
    if time_section:
        lines.append("\nüïí Tiempo:")
        lines.extend([f"  {line}" for line in time_section])
    
    # Otros campos
    other_fields = [f for f in item.keys() if f not in id_fields + location_fields + status_fields + time_fields]
    if other_fields:
        lines.append("\nüìÑ Otros datos:")
        for field in other_fields:
            lines.append(f"  {field}: {item[field]}")
    
    return "\n".join(lines)

def render_examples_tab():
    """
    Renderiza la pesta√±a de ejemplos de consultas.
    """
    logger.info("Entrando a la p√°gina de Ejemplos")
    st.title("Ejemplos de Consultas para IoT Monitor")
    
    # Agrupar ejemplos por categor√≠as
    categories = {
        "Consultas de dispositivos": [
            "¬øCu√°l es la latitud del dispositivo 6cfc7a7a?",
            "¬øCu√°l es la longitud del dispositivo 6cfc7a7a?",
            "¬øCu√°l es el nivel de bater√≠a del dispositivo 58fc7458?",
            "¬øCu√°l es el estado del dispositivo 12ab34cd?",
            "¬øCu√°les son las coordenadas exactas del dispositivo ID 9999abcd?",
            "¬øC√≥mo saber la ubicaci√≥n en tiempo real de un dispositivo?",
            "¬øCu√°l fue la √∫ltima vez que se detect√≥ tamper en el dispositivo 74fdc9b1?",
            "¬øC√≥mo saber si el dispositivo 6cfc7a7a cambi√≥ su estado recientemente?",
            "¬øCu√°les son los √∫ltimos 5 registros del dispositivo 6cfc7a7a?"
        ],
        "Consultas de usuarios": [
            "¬øD√≥nde se encuentra en este momento la persona con ID a4be2b7f en latitud?",
            "¬øD√≥nde se encuentra en este momento la persona con ID a4be2b7f en longitud?",
            "¬øCu√°les son las coordenadas de todos los dispositivos de la persona con ID ffff1234?",
            "Muestra la √∫ltima ubicaci√≥n de user_id=abc123",
            "¬øQui√©n tiene el nivel de bater√≠a m√°s alto?",
            "¬øQu√© usuario tiene la se√±al m√°s d√©bil?",
            "¬øCu√°l es el usuario asociado al dispositivo con ID 5db3e12f?",
            "¬øCu√°l es la persona con ID 056558c7 y d√≥nde est√° su dispositivo?",
            "Muestra la se√±al y la bater√≠a de cada dispositivo de user_id=f00dabcd"
        ],
        "Consultas de alertas y problemas": [
            "¬øQu√© dispositivos tienen bater√≠a menor que 20%?",
            "¬øQu√© dispositivos tienen se√±al menor que -90 dBm?",
            "¬øQu√© usuarios tienen un dispositivo con tamper_detected=TRUE?",
            "¬øQu√© dispositivos han violado restricciones?",
            "¬øHay dispositivos con bater√≠a muy baja?",
            "¬øExisten dispositivos con tamper_detected=TRUE y bater√≠a menor de 10%?",
            "¬øQu√© dispositivos se encuentran fuera de su zona permitida?",
            "¬øCu√°ntos dispositivos han reportado restricci√≥n violada?",
            "¬øHay alg√∫n dispositivo con restricci√≥n_violation=TRUE en la ciudad X?",
            "¬øExisten usuarios con m√°s de un dispositivo que reporta tamper_detected=TRUE?",
            "¬øCu√°ntos dispositivos se encuentran con battery_level < 5% y status=1?"
        ],
        "Consultas estad√≠sticas": [
            "¬øHay dispositivos con bater√≠a muy baja?",
            "¬øCu√°ntos dispositivos est√°n inactivos (status=0)?",
            "¬øCu√°l es el promedio de se√±al en todos los dispositivos?",
            "¬øCu√°ntos dispositivos en total est√°n activos (status=1)?",
            "¬øSe encuentra alg√∫n dispositivo con latitud mayor a 45?",
            "¬øQu√© dispositivo est√° m√°s cerca del ecuador (latitud=0)?",
            "¬øHay alg√∫n dispositivo sin se√±al (signal_strength=Null o -999)?",
            "¬øCu√°ntos dispositivos tienen status=2?",
            "¬øQu√© dispositivos se han reactivado en la √∫ltima hora?",
            "¬øCu√°l es el device_id con menor nivel de bater√≠a?",
            "¬øCu√°ntos dispositivos est√°n operando normalmente?"
        ]
    }
    
    # Mostrar ejemplos por categor√≠a
    for category, examples in categories.items():
        st.subheader(category)
        
        # Crear columnas para ejemplos
        cols = st.columns(2)
        half_length = len(examples) // 2 + (len(examples) % 2)
        
        # Distribuir ejemplos en columnas
        for i, example in enumerate(examples):
            col_idx = 0 if i < half_length else 1
            with cols[col_idx]:
                # Bot√≥n que se puede usar para probar el ejemplo
                if st.button(f"üîç {example}", key=f"example_{category}_{i}"):
                    # Guardar consulta en session state y redirigir a pesta√±a de chatbot
                    st.session_state["chat_query"] = example
                    st.session_state["active_tab"] = "ChatBot"
                    st.rerun()

def render_chatbot_tab():
    """
    Renderiza la pesta√±a del ChatBot IoT.
    """
    logger.info("Entrando a la p√°gina ChatBot IoT")
    st.title("ChatBot IoT - Consulta Inteligente")
    
    # Opciones de configuraci√≥n en la barra lateral
    with st.sidebar:
        st.subheader("Configuraci√≥n del ChatBot")
        
        # Modelo de IA
        model = st.selectbox(
            "Modelo:",
            ["gpt-3.5-turbo", "gpt-4o"],
            index=0
        )
        
        # Guardar configuraci√≥n
        if model != st.session_state["settings"]["model"]:
            st.session_state["settings"]["model"] = model
        
        # Bot√≥n para limpiar historial
        if st.button("üóëÔ∏è Limpiar historial", use_container_width=True):
            st.session_state["messages"] = []
            st.rerun()
    
    # Contenedor para mensajes de chat
    chat_container = st.container()
    
    # Mostrar mensajes previos
    with chat_container:
        for msg in st.session_state["messages"]:
            with st.chat_message(msg["role"]):
                st.markdown(msg["content"])
    
    # Procesar consulta guardada desde otra pesta√±a
    if "chat_query" in st.session_state and st.session_state["chat_query"]:
        user_prompt = st.session_state["chat_query"]
        st.session_state["chat_query"] = ""  # Limpiar para evitar repetici√≥n
    else:
        # Entrada de chat normal
        user_prompt = st.chat_input("Escribe tu pregunta sobre dispositivos IoT...")
    
    # Procesar la entrada del usuario
    if user_prompt:
        # A√±adir mensaje del usuario al historial
        st.session_state["messages"].append({"role": "user", "content": user_prompt})
        
        # Mostrar mensaje del usuario
        with chat_container:
            with st.chat_message("user"):
                st.markdown(user_prompt)
        
        # 1) Interpretar la consulta y obtener contextos relevantes
        with st.spinner("Buscando informaci√≥n relevante..."):
            contexts, used_filter, used_fallback = interpret_and_search(user_prompt)
        
        # 2) Generar respuesta
        with st.spinner("Generando respuesta..."):
            # Usar el modelo configurado
            model = st.session_state["settings"]["model"]
            assistant_response = generate_chat_response(contexts, user_prompt, model=model)
        
        # A√±adir respuesta al historial
        st.session_state["messages"].append({"role": "assistant", "content": assistant_response})
        
        # Mostrar respuesta del asistente
        with chat_container:
            with st.chat_message("assistant"):
                st.markdown(assistant_response)
            
            # Mostrar informaci√≥n sobre el proceso (opcional)
            with st.expander("Detalles de la consulta", expanded=False):
                st.markdown(f"""
                - **Modelo utilizado**: {model}
                - **Consulta interpretada autom√°ticamente**: {"‚úÖ S√≠" if used_filter else "‚ùå No"}
                - **M√©todo de b√∫squeda**: {"üîç Filtrado directo" if used_filter else "üîç B√∫squeda por similitud"} 
                - **Fallback activado**: {"‚úÖ S√≠" if used_fallback else "‚ùå No"}
                - **Contextos relevantes encontrados**: {len(contexts)}
                """)
                
                if contexts:
                    st.markdown("**Fragmentos de contexto utilizados:**")
                    for i, ctx in enumerate(contexts[:3]):  # Mostrar solo los 3 primeros
                        st.markdown(f"**Fragmento {i+1}:**")
                        st.code(ctx[:300] + "..." if len(ctx) > 300 else ctx)

# Funci√≥n auxiliar para formatar datos
def format_json_data(data):
    """
    Formatea datos JSON para mostrarlos de forma m√°s amigable.
    
    Args:
        data: Datos JSON a formatear
        
    Returns:
        str: Representaci√≥n formateada
    """
    import json
    try:
        return json.dumps(data, indent=2, ensure_ascii=False)
    except:
        return str(data)

# Punto de entrada si se ejecuta directamente
if __name__ == "__main__":
    render_iot_monitor_app()
